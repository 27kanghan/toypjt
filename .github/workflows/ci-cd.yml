# 1. 워크플로우 이름
name: CI/CD Pipeline for Spring Boot

# 2. 실행 시점
on:
  push:
    branches: [ "master" ]

# 3. 실행할 작업들
jobs:
  #######################
  # 1. CI (빌드/테스트) 작업
  #######################
  build:
    runs-on: ubuntu-latest
    steps:
      # (1) 코드 복사
      - uses: actions/checkout@v4

      # (2) JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # (3) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # (4) Gradle로 빌드 (test 포함)
      - name: Build with Gradle
        run: ./gradlew build

      # (5) [CD를 위한 1단계] 빌드된 .jar 파일을 GitHub Actions에 업로드
      - name: Upload artifact (jar file)
        uses: actions/upload-artifact@v4
        with:
          name: toypjt-jar  # 1. 업로드할 파일 묶음의 별명
          path: build/libs/*.jar # 2. build/libs/ 폴더에 있는 .jar 파일을 (이름이 뭐든)
          retention-days: 1 # 3. 1일만 보관

  #######################
  # 2. CD (배포) 작업
  #######################
  deploy:
    needs: build # 1. 'build' 작업이 성공해야만 이 작업이 실행됨
    runs-on: ubuntu-latest

    steps:
      # (1) build 작업이 업로드한 .jar 파일을 다운로드
      - name: Download artifact (jar file)
        uses: actions/download-artifact@v4
        with:
          name: toypjt-jar # 'build' 작업에서 쓴 별명과 같아야 함

      # (2) [핵심] SSH로 AWS 서버에 접속해서 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          # (a) GitHub Secrets에 등록한 비밀 변수들
          host: ${{ secrets.SERVER_HOST }}     # 서버 IP
          username: ${{ secrets.SERVER_USER }} # ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}   # .pem 키 내용
          port: 22                             # SSH 접속 포트 (기본값)

          # (b) AWS 서버에서 실행할 명령어들
          script: |
            # 1. (중요) 다운로드된 .jar 파일의 이름을 app.jar로 변경
            #    (gradle 빌드 시 이름이 toypjt-0.0.1-SNAPSHOT.jar처럼 복잡하니까)
            mv toypjt-0.0.1-SNAPSHOT.jar app.jar
            
            # 2. 기존에 실행 중이던 'app.jar' 프로그램이 있으면 종료
            pkill -f 'app.jar' || true
            
            # 3. 새 app.jar 파일을 백그라운드로 실행 (터미널 꺼도 안 죽게)
            nohup java -jar app.jar > app.log 2>&1 &
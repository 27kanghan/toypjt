# 1. 워크플로우 이름
name: CI/CD Pipeline for Spring Boot

# 2. 실행 시점 (main 브랜치에 push될 때)
on:
  push:
    branches: [ "main" ]

# 3. 실행할 작업들
jobs:
  #######################
  # 1. CI (빌드/테스트) 작업
  #######################
  build:
    runs-on: ubuntu-latest
    steps:
      # (1) 코드 복사
      - uses: actions/checkout@v4

      # (2) JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # (3) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # (4) Gradle로 빌드 (test는 건너뛰기)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # (5) 빌드된 .jar 파일을 GitHub Actions에 업로드
      - name: Upload artifact (jar file)
        uses: actions/upload-artifact@v4
        with:
          name: toypjt-jar
          path: build/libs/*.jar # build/libs/ 폴더의 모든 .jar 파일을 보관
          retention-days: 1 # 1일만 보관

  #######################
  # 2. CD (배포) 작업
  #######################
  deploy:
    needs: build # 1. 'build' 작업이 성공해야만 이 작업이 실행됨
    runs-on: ubuntu-latest

    steps:
      # (1) build 작업이 업로드한 .jar 파일을 '로봇'의 서버로 다운로드
      - name: Download artifact (jar file)
        uses: actions/download-artifact@v4
        with:
          name: toypjt-jar

      # (2) (디버깅용) 다운로드한 파일 목록 확인
      - name: List files in directory
        run: ls -la

      # (3) 'scp' 로봇을 사용해 .jar 파일을 AWS 서버로 "복사"
      - name: Copy jar file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "toyPJT-0.0.1-SNAPSHOT.jar" # 👈 대소문자 확인
          target: "/home/ubuntu"

      # (4) 'ssh' 로봇을 사용해 AWS 서버에서 "명령어 실행"
      - name: Run deploy script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22

          # (b) "복사가 끝난 후" AWS 서버에서 실행할 명령어들
          script: |
            # 1. 'scp' 로봇이 복사해 둔 파일을 app.jar로 이름 변경
            mv /home/ubuntu/toyPJT-0.0.1-SNAPSHOT.jar /home/ubuntu/app.jar # 👈 대소문자 확인

            # 2. 'app.jar'를 실행 중인 'java' 프로세스의 PID를 찾아서 종료 (안전한 방식)
            PID=$(ps -ef | grep 'java -jar /home/ubuntu/app.jar' | grep -v 'grep' | awk '{print $2}')
            if [ -n "$PID" ]; then
              echo "Killing process: $PID"
              kill -9 $PID
            fi

            # 3. 새 app.jar 파일을 백그라운드로 실행 (로그 파일 남기기)
            nohup java -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &

